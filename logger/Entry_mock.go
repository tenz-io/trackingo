// Code generated by mockery v2.36.0. DO NOT EDIT.

package logger

import mock "github.com/stretchr/testify/mock"

// MockEntry is an autogenerated mock type for the Entry type
type MockEntry struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg
func (_m *MockEntry) Debug(msg string) {
	_m.Called(msg)
}

// DebugWith provides a mock function with given fields: msg, fields
func (_m *MockEntry) DebugWith(msg string, fields Fields) {
	_m.Called(msg, fields)
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockEntry) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Enabled provides a mock function with given fields: level
func (_m *MockEntry) Enabled(level Level) bool {
	ret := _m.Called(level)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Level) bool); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Error provides a mock function with given fields: msg
func (_m *MockEntry) Error(msg string) {
	_m.Called(msg)
}

// ErrorWith provides a mock function with given fields: msg, fields
func (_m *MockEntry) ErrorWith(msg string, fields Fields) {
	_m.Called(msg, fields)
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockEntry) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg
func (_m *MockEntry) Info(msg string) {
	_m.Called(msg)
}

// InfoWith provides a mock function with given fields: msg, fields
func (_m *MockEntry) InfoWith(msg string, fields Fields) {
	_m.Called(msg, fields)
}

// Infof provides a mock function with given fields: format, args
func (_m *MockEntry) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: msg
func (_m *MockEntry) Warn(msg string) {
	_m.Called(msg)
}

// WarnWith provides a mock function with given fields: msg, fields
func (_m *MockEntry) WarnWith(msg string, fields Fields) {
	_m.Called(msg, fields)
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockEntry) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: data
func (_m *MockEntry) With(data interface{}) Entry {
	ret := _m.Called(data)

	var r0 Entry
	if rf, ok := ret.Get(0).(func(interface{}) Entry); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entry)
		}
	}

	return r0
}

// WithError provides a mock function with given fields: err
func (_m *MockEntry) WithError(err error) Entry {
	ret := _m.Called(err)

	var r0 Entry
	if rf, ok := ret.Get(0).(func(error) Entry); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entry)
		}
	}

	return r0
}

// WithField provides a mock function with given fields: k, v
func (_m *MockEntry) WithField(k string, v interface{}) Entry {
	ret := _m.Called(k, v)

	var r0 Entry
	if rf, ok := ret.Get(0).(func(string, interface{}) Entry); ok {
		r0 = rf(k, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entry)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: fields
func (_m *MockEntry) WithFields(fields Fields) Entry {
	ret := _m.Called(fields)

	var r0 Entry
	if rf, ok := ret.Get(0).(func(Fields) Entry); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entry)
		}
	}

	return r0
}

// WithTracing provides a mock function with given fields: requestId
func (_m *MockEntry) WithTracing(requestId string) Entry {
	ret := _m.Called(requestId)

	var r0 Entry
	if rf, ok := ret.Get(0).(func(string) Entry); ok {
		r0 = rf(requestId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Entry)
		}
	}

	return r0
}

// NewMockEntry creates a new instance of MockEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntry {
	mock := &MockEntry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
