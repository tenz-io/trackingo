// Code generated by mockery v2.36.0. DO NOT EDIT.

package cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// Del provides a mock function with given fields: ctx, key
func (_m *MockManager) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *MockManager) Eval(ctx context.Context, script string, keys []string, args ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) (interface{}, error)); ok {
		return rf(ctx, script, keys, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) interface{}); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, ...interface{}) error); ok {
		r1 = rf(ctx, script, keys, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Expire provides a mock function with given fields: ctx, key, expire
func (_m *MockManager) Expire(ctx context.Context, key string, expire time.Duration) error {
	ret := _m.Called(ctx, key, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockManager) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlob provides a mock function with given fields: ctx, key, output
func (_m *MockManager) GetBlob(ctx context.Context, key string, output interface{}) error {
	ret := _m.Called(ctx, key, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, raw, expire
func (_m *MockManager) Set(ctx context.Context, key string, raw string, expire time.Duration) error {
	ret := _m.Called(ctx, key, raw, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, raw, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBlob provides a mock function with given fields: ctx, key, val, expire
func (_m *MockManager) SetBlob(ctx context.Context, key string, val interface{}, expire time.Duration) error {
	ret := _m.Called(ctx, key, val, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, val, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNx provides a mock function with given fields: ctx, key, raw, expire
func (_m *MockManager) SetNx(ctx context.Context, key string, raw string, expire time.Duration) (bool, error) {
	ret := _m.Called(ctx, key, raw, expire)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (bool, error)); ok {
		return rf(ctx, key, raw, expire)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) bool); ok {
		r0 = rf(ctx, key, raw, expire)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = rf(ctx, key, raw, expire)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
