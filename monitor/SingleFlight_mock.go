// Code generated by mockery v2.36.0. DO NOT EDIT.

package monitor

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSingleFlight is an autogenerated mock type for the SingleFlight type
type MockSingleFlight struct {
	mock.Mock
}

// BeginRecord provides a mock function with given fields: ctx, dsCmd
func (_m *MockSingleFlight) BeginRecord(ctx context.Context, dsCmd string) *Recorder {
	ret := _m.Called(ctx, dsCmd)

	var r0 *Recorder
	if rf, ok := ret.Get(0).(func(context.Context, string) *Recorder); ok {
		r0 = rf(ctx, dsCmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Recorder)
		}
	}

	return r0
}

// Count provides a mock function with given fields: ctx, dsCmd, code, opt
func (_m *MockSingleFlight) Count(ctx context.Context, dsCmd string, code int, opt string) {
	_m.Called(ctx, dsCmd, code, opt)
}

// CountDelta provides a mock function with given fields: ctx, dsCmd, code, delta, opt
func (_m *MockSingleFlight) CountDelta(ctx context.Context, dsCmd string, code int, delta int, opt string) {
	_m.Called(ctx, dsCmd, code, delta, opt)
}

// Decr provides a mock function with given fields: ctx, dsCmd, code, opt
func (_m *MockSingleFlight) Decr(ctx context.Context, dsCmd string, code int, opt string) {
	_m.Called(ctx, dsCmd, code, opt)
}

// Incr provides a mock function with given fields: ctx, dsCmd, code, opt
func (_m *MockSingleFlight) Incr(ctx context.Context, dsCmd string, code int, opt string) {
	_m.Called(ctx, dsCmd, code, opt)
}

// Observe provides a mock function with given fields: ctx, dsCmd, code, millis
func (_m *MockSingleFlight) Observe(ctx context.Context, dsCmd string, code int, millis float64) {
	_m.Called(ctx, dsCmd, code, millis)
}

// Sample provides a mock function with given fields: ctx, dsCmd, code, val, opt
func (_m *MockSingleFlight) Sample(ctx context.Context, dsCmd string, code int, val float64, opt string) {
	_m.Called(ctx, dsCmd, code, val, opt)
}

// Set provides a mock function with given fields: ctx, dsCmd, code, val, opt
func (_m *MockSingleFlight) Set(ctx context.Context, dsCmd string, code int, val float64, opt string) {
	_m.Called(ctx, dsCmd, code, val, opt)
}

// NewMockSingleFlight creates a new instance of MockSingleFlight. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSingleFlight(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSingleFlight {
	mock := &MockSingleFlight{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
