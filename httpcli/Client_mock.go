// Code generated by mockery v2.36.0. DO NOT EDIT.

package httpcli

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, url, params, headers
func (_m *MockClient) Delete(ctx context.Context, url string, params Params, headers Headers) error {
	ret := _m.Called(ctx, url, params, headers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers) error); ok {
		r0 = rf(ctx, url, params, headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, url, params, headers
func (_m *MockClient) Get(ctx context.Context, url string, params Params, headers Headers) ([]byte, error) {
	ret := _m.Called(ctx, url, params, headers)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers) ([]byte, error)); ok {
		return rf(ctx, url, params, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers) []byte); ok {
		r0 = rf(ctx, url, params, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, Params, Headers) error); ok {
		r1 = rf(ctx, url, params, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Head provides a mock function with given fields: ctx, url, params, headers
func (_m *MockClient) Head(ctx context.Context, url string, params Params, headers Headers) error {
	ret := _m.Called(ctx, url, params, headers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers) error); ok {
		r0 = rf(ctx, url, params, headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Post provides a mock function with given fields: ctx, url, params, headers, reqBody
func (_m *MockClient) Post(ctx context.Context, url string, params Params, headers Headers, reqBody []byte) ([]byte, error) {
	ret := _m.Called(ctx, url, params, headers, reqBody)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers, []byte) ([]byte, error)); ok {
		return rf(ctx, url, params, headers, reqBody)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers, []byte) []byte); ok {
		r0 = rf(ctx, url, params, headers, reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, Params, Headers, []byte) error); ok {
		r1 = rf(ctx, url, params, headers, reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, url, params, headers, reqBody
func (_m *MockClient) Put(ctx context.Context, url string, params Params, headers Headers, reqBody []byte) ([]byte, error) {
	ret := _m.Called(ctx, url, params, headers, reqBody)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers, []byte) ([]byte, error)); ok {
		return rf(ctx, url, params, headers, reqBody)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, Params, Headers, []byte) []byte); ok {
		r0 = rf(ctx, url, params, headers, reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, Params, Headers, []byte) error); ok {
		r1 = rf(ctx, url, params, headers, reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request provides a mock function with given fields: ctx, req
func (_m *MockClient) Request(ctx context.Context, req *http.Request) (*http.Response, error) {
	ret := _m.Called(ctx, req)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (*http.Response, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *http.Response); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
